{
  "Command Starter": {
    "prefix": "Command",
    "body": [
      "use std::error::Error;",
      "use twilight_interactions::command::{CommandModel, CreateCommand};",
      "use twilight_model::application::interaction::application_command::CommandData;",
      "use twilight_util::builder::InteractionResponseDataBuilder;",
      "",
      "use crate::{context::CommandContext, interactions::util::reply};",
      "",
      "#[derive(CommandModel, CreateCommand)]",
      "#[command(name = \"${1:name}\", desc = \"${2:description}\")]",
      "pub struct ${3:structName};",
      "",
      "pub async fn run(",
      "    ctx: &CommandContext,",
      "    command_data: CommandData,",
      ") -> Result<(), Box<dyn Error + Send + Sync>> {",
      "    let options = ${3:structName}::from_interaction(command_data.into())?;",
      "",
      "    let response = InteractionResponseDataBuilder::new()",
      "        .content(\"Content placed\")",
      "        .build();",
      "",
      "    reply(ctx, response).await?;",
      "",
      "    Ok(())",
      "}",
      ""
    ],
    "description": "A basic structure of what a command should be."
  }
}
